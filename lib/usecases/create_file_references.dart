import 'dart:async';
import 'dart:io';

import '../core/app_constants.dart';
import '../utils/file_system/file_system_util.dart';

class CreateFileReferences {
  final String _sourceDirectory;
  final List<String> _removeFileWithSufixes;
  final CreateFileReferencesHelper _helper;
  final String? _packageName;

  CreateFileReferences(
    this._helper,
    this._sourceDirectory, [
    this._removeFileWithSufixes = const [],
    String? packageName,
  ]) : _packageName = packageName ??= Directory.current.path.split('/').last;

  Future<File> call() async {
    final fileSytemEntities =
        await _helper.getFileSystemEntities(Directory(_sourceDirectory));

    final filteredFilePaths =
        _helper.getFilteredFilePaths(fileSytemEntities, _removeFileWithSufixes);

    final fileImports = [
      '/*\n'
          'Do not edit this file manually, it is overwritten every time dlcov\n'
          'runs, in order to make coverage work for all dart files\n'
          '*/\n',
    ];

    fileImports.add('// ignore_for_file: unused_import');

    fileImports.addAll(filteredFilePaths
        .map((path) =>
            "import 'package:$_packageName${path.replaceFirst(_sourceDirectory, '')}';")
        .toList());

    fileImports.add('void main(){}');

    final allFilesReferences = fileImports.join('\n');

    return await _helper.writeContentToFile(
        allFilesReferences, AppConstants.dlcovFileReferences);
  }
}

class CreateFileReferencesHelper {
  final FileSystemUtil fileSystemUtil;

  CreateFileReferencesHelper(this.fileSystemUtil);

  getImportsList(List<FileSystemEntity> fileSytemEntities,
      List<String> removeFileWithSufixes) {}

  Future<List<FileSystemEntity>> getFileSystemEntities(Directory dir) {
    final files = <FileSystemEntity>[];
    final completer = Completer<List<FileSystemEntity>>();
    final filesStream = dir.list(recursive: true);
    filesStream.listen((file) => files.add(file),
        onError: (error) {
          print(error);
          exit(126);
        },
        onDone: () => completer.complete(files));
    return completer.future;
  }

  List<String> getFilteredFilePaths(List<FileSystemEntity> fileSytemEntities,
      List<String> removeFileWithSufixes) {
    return fileSytemEntities
        .where((fileSystemEntity) {
          return fileSystemEntity.path.endsWith('.dart') &&
              !removeFileWithSufixes
                  .any((sufix) => fileSystemEntity.path.endsWith(sufix));
        })
        .map((e) => e.path)
        .toList();
  }

  Future<File> writeContentToFile(String content, String path) =>
      fileSystemUtil.writeToFile(content, path);
}
